[{"content":"","date":null,"permalink":"/","section":"","summary":"","title":""},{"content":"这里会写一些我学习AIML的笔记。\n","date":null,"permalink":"/aiml/","section":"AIML","summary":"这里会写一些我学习AIML的笔记。","title":"AIML"},{"content":"首先，这里有一些PyTorch的参考资料：\nPyTorch官方文档 深度学习入门 一些示例代码及解释 #import torch as pt x = pt.arange(12) print(x) X = x.reshape(3,4) # 等同于下一行（指定一个维度并自动计算另一个） XX = x.reshape(-1,4) pt.zeros(2,3,4,5) # 创建一个四维的零张量 x = pt.randn(3,4) # 来自正态分布的随机张量 y = pt.randn(3,4) pt.tensor([[1,2,3,4],[2,1,4,3],[4,3,5,2]]) # 手动输入一个二维张量 addd = x + y # 逐元素加法 subb = x - y mutt = x * y divw = x / y poww = x ** y expp = pt.exp(x) rcat = pt.cat((x,y),dim=0) # 沿行连接，dim=1沿列连接 x == y # 检查两个矩阵对应位置的值是否相等并输出一个布尔矩阵 x.sum() # 求张量中所有值的和 广播机制用于执行逐元素操作。该机制如下工作：\n通过适当复制元素来扩展数组，以便在转换后，两个张量具有相同的形状。 在结果数组上执行逐元素操作。 PyTorch根据设计的模型构建计算图，以执行自动微分和计算梯度，然后执行反向传播以更新参数。\n","date":"2023年4月20日","permalink":"/aiml/pytorch-fundamentals/","section":"AIML","summary":"PyTorch的基础知识","title":"PyTorch基础知识"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":null,"permalink":"/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/","section":"Tags","summary":"","title":"深度学习"},{"content":"这里会写不太相关的一些东西。\n","date":null,"permalink":"/other/","section":"其他","summary":"这里会写不太相关的一些东西。","title":"其他"},{"content":"","date":null,"permalink":"/tags/%E6%AD%A3%E5%88%99/","section":"Tags","summary":"","title":"正则"},{"content":"正则表达式快查笔记 #下表来源于RegexOne，这是一个可供练习的学习正则表达式的网站。\nExample Description abc\u0026hellip; Letters 123\u0026hellip; Digits \\d Any Digit \\D Any Non-digit character . Any Character . Period [abc] Only a, b, or c [^abc] Not a, b, nor c [a-z] Characters a to z [0-9] Numbers 0 to 9 \\w Any Alphanumeric character \\W Any Non-alphanumeric character {m} m Repetitions {m,n} m to n Repetitions * Zero or more repetitions + One or more repetitions ? Optional character \\s Any Whitespace \\S Any Non-whitespace character ^…$ Starts and ends (…) Capture Group (a(bc)) Capture Sub-group (.*) Capture all (abc|def) Matches abc or def ","date":"2023年4月10日","permalink":"/other/regex-notes/","section":"其他","summary":"一个正则表达式快查表","title":"正则表达式快查笔记"},{"content":" 这篇文章教你怎么在MacOS Apple Silicon上安装Tensorflow。\n先决条件 #在安装Tensorflow之前，先安装xcode命令行工具。在终端输入以下命令来安装：\nxcode-select --install 此外，本教程基于Anaconda，但你也可以使用Miniconda或Virtualenv创建虚拟环境。您可以从这里下载并安装Anaconda。找到合适的版本，并按照官网的安装说明进行操作。这里不再赘述。安装Anaconda后，可以直接使用Python。但是，如果您想使用conda创建虚拟环境，需要通过在终端输入以下命令来初始化conda：\nconda init 安装Tensorflow和Tensorflow Metal #首先，基于Python 3.8创建一个名为tensorflow的虚拟环境：\nconda create -n tensorflow python=3.8 然后，激活虚拟环境：\nconda activate tensorflow 安装Tensorflow和Tensorflow Metal的依赖项：\nconda install -c apple tensorflow-deps 如果在安装包时遇到问题，请将以下命令添加到用户文件夹中的.condarc文件中，继续安装：\nsubdirs: - osx-arm64 接下来，根据Apple官网Get started with tensorflow-metal页面底部表格中列出的tensorflow-macos和tensorflow-metal的版本，使用以下命令安装Tensorflow和Tensorflow Metal插件（metal插件可以启用Apple Silicon的GPU加速）：\npython -m pip install tensorflow-macos==2.9 tensorflow-metal==0.5.0 测试安装 #使用以下命令安装Jupyter Notebook：\nconda install -c conda-forge -y jupyter 使用以下脚本来测试和运行Tensorflow（或者也可以使用官网的代码）：\nimport tensorflow as tf print(tf.__version__) print(tf.config.list_physical_devices(\u0026#39;GPU\u0026#39;)) 如果输出是：\n2.9.0 [PhysicalDevice(name=\u0026#39;/physical_device:GPU:0\u0026#39;, device_type=\u0026#39;GPU\u0026#39;)] 你已经成功在Apple Silicon上安装了Tensorflow和Tensorflow Metal，玩的开心（\n参考资料：Get started with tensorflow-metal\n","date":"2023年3月31日","permalink":"/aiml/macos-tf-install/","section":"AIML","summary":"教你怎么在MacOS Apple Silicon上安装Tensorflow","title":"如何在Apple Silicon上安装Tensorflow并启用GPU加速"},{"content":"这里会写一些我学习优化的笔记。\n","date":null,"permalink":"/opt/","section":"OPT","summary":"这里会写一些我学习优化的笔记。","title":"OPT"}]