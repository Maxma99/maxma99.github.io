[{"content":"","date":null,"permalink":"/","section":"","summary":"","title":""},{"content":"这里会写一些我学习AIML的笔记。\n","date":null,"permalink":"/aiml/","section":"AIML","summary":"","title":"AIML"},{"content":"","date":null,"permalink":"/tags/chatgpt/","section":"Tags","summary":"","title":"ChatGPT"},{"content":"这篇文章提供了一些ChatGPT提示和其他聊天机器人提示的例子，您可以将它们复制粘贴到聊天机器人中按照您的需求使用。有些提示是用中文给出的，有些则是用英文给出的，您可以使用第一个提示来翻译其他中文提示，翻译提示会同时以中文和英文给出。\nChatGPT（或其他聊天机器人）提示 #翻译专家 # I would like to appoint you as a translation expert with above-average intelligence and proficiency in translation. Your translation skills are powerful, and you are capable of translating various languages. I will state my requirements before each translation, and I will provide the sentences for you to translate after that, separated by a pair of %%%. You only need to provide the translations. Here\u0026#39;s an example: Please translate the following sentence into Chinese without altering the original Markdown formatting, code formatting, and Katex formulas: %%% Clustering algorithms, SVM, generative adversarial networks, decision trees, regression methods, ensemble learning, Bayesian classifiers, dimensionality reduction and metric learning, computational learning theory, various gradient descent methods. %%% 中文提示词：\n我想让你担任一个智商高于常人，并且精通翻译的翻译专家，你的翻译技巧很强大，并且会翻译各种语言，我对你的要求会在翻译之前提出，并在此之后会提供让你翻译的句子，翻译的内容由两个由%%%分隔的句子组成，你只需要提供翻译即可，例子如下： 请将下列句子翻译成英文，并且不要破坏原有的Markdown格式、代码格式和Katex公式： %%% 聚类算法，SVM，生成对抗网络，决策树，回归方法，集成学习，贝叶斯分类器，降维和度量学习，计算学习理论，各类梯度下降法 %%% 心理健康顾问（医生） # 我想让你担任心理健康顾问。我将为您提供一个寻求指导和建议的人，以管理他们的情绪、压力、焦虑和其他心理健康问题。您应该利用您的认知行为疗法、冥想技巧、正念练习和其他治疗方法的知识来制定个人可以实施的策略，以改善他们的整体健康状况。现在我要求你向我提问，像一个心理医生一样来询问我的详细的信息来增进你对我目前状况的了解，然后你要像一个心理医生一样对我进行可能的诊断，为我的心理健康提出建议和进行帮助。 提示工程助理顾问 # 我想让你担任提示工程助理顾问（Prompt Assistant）。我将为您提供一个寻求ChatGPT的提示工程指导(ChatGPT prompt assist)的人，以帮助他们更好地使用ChatGPT。您应该利用您自己，根据ChatGPT的特性与知识来制定个人可以实施的策略，越详尽越好，以改善他们的ChatGPT使用状况。现在我要求你向我提问，像一个助手一样来询问我的详细的信息来增进你对我目前状况的了解，以及问我想要ChatGPT来做什么，然后你要像一个提示工程助理顾问一样跟我说该如何向ChatGPT提问来获得更多的信息，为我的ChatGPT的使用提出建议和进行帮助。 学者 # Act as an academician whose expertise is reading and summarizing scientific papers. You are given paragraphs from a research paper. Then I will ask you questions about this paper. If I don\u0026#39;t ask any questions, you should write a summary of the provided contexts. If I ask a question, you should write an answer for the question based on the provided contexts. If the context is irrelevant, reply \u0026#34;I cannot answer. For each sentence in your answer, indicate which sources most support it via valid citation markers at the end of sentences, like (Example2022). Answer in an unbiased and scholarly tone. Make clear what is your opinion. Try to use direct quotes to support arguments. 来源：\nLangGPT Awesome ChatGPT Prompts DataFit ","date":"2023年4月20日","permalink":"/other/used-prompts/","section":"其他","summary":"","title":"ChatGPT提示词分享"},{"content":"首先，这里有一些PyTorch的参考资料：\nPyTorch官方文档 深度学习入门 一些示例代码及解释 #import torch as pt x = pt.arange(12) print(x) X = x.reshape(3,4) # 等同于下一行（指定一个维度并自动计算另一个） XX = x.reshape(-1,4) pt.zeros(2,3,4,5) # 创建一个四维的零张量 x = pt.randn(3,4) # 来自正态分布的随机张量 y = pt.randn(3,4) pt.tensor([[1,2,3,4],[2,1,4,3],[4,3,5,2]]) # 手动输入一个二维张量 addd = x + y # 逐元素加法 subb = x - y mutt = x * y divw = x / y poww = x ** y expp = pt.exp(x) rcat = pt.cat((x,y),dim=0) # 沿行连接，dim=1沿列连接 x == y # 检查两个矩阵对应位置的值是否相等并输出一个布尔矩阵 x.sum() # 求张量中所有值的和 广播机制用于执行逐元素操作。该机制如下工作：\n通过适当复制元素来扩展数组，以便在转换后，两个张量具有相同的形状。 在结果数组上执行逐元素操作。 PyTorch根据设计的模型构建计算图，以执行自动微分和计算梯度，然后执行反向传播以更新参数。\n","date":"2023年4月20日","permalink":"/aiml/pytorch-fundamentals/","section":"AIML","summary":"PyTorch的基础知识","title":"PyTorch基础知识"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"这里会写不太相关的一些东西。\n","date":null,"permalink":"/other/","section":"其他","summary":"","title":"其他"},{"content":"","date":null,"permalink":"/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/","section":"Tags","summary":"","title":"深度学习"},{"content":"","date":null,"permalink":"/tags/%E6%AD%A3%E5%88%99/","section":"Tags","summary":"","title":"正则"},{"content":"正则表达式快查笔记 #下表来源于RegexOne，这是一个可供练习的学习正则表达式的网站。\n例子 描述 abc\u0026hellip; 精确匹配字母 123\u0026hellip; 精确匹配数字 \\d 匹配任意数字 \\D 匹配任意非数字字符 . 匹配任意字符 . 匹配英文句号\u0026quot;.\u0026quot; [abc] 匹配a,b,c中的任意一个 [^abc] 不匹配a,b,c中的任意一个 [a-z] 匹配字母a到z [0-9] 匹配数字0-9 \\w Any Alphanumeric character \\W Any Non-alphanumeric character {m} m Repetitions {m,n} m to n Repetitions * Zero or more repetitions + One or more repetitions ? Optional character \\s Any Whitespace \\S Any Non-whitespace character ^…$ Starts and ends (…) Capture Group (a(bc)) Capture Sub-group (.*) Capture all (abc|def) Matches abc or def ","date":"2023年4月10日","permalink":"/other/regex-notes/","section":"其他","summary":"一个正则表达式快查表","title":"正则表达式快查笔记"},{"content":" 这篇文章教你怎么在MacOS Apple Silicon上安装Tensorflow。\n先决条件 #在安装Tensorflow之前，先安装xcode命令行工具。在终端输入以下命令来安装：\nxcode-select --install 此外，本教程基于Anaconda，但你也可以使用Miniconda或Virtualenv创建虚拟环境。您可以从这里下载并安装Anaconda。找到合适的版本，并按照官网的安装说明进行操作。这里不再赘述。安装Anaconda后，可以直接使用Python。但是，如果您想使用conda创建虚拟环境，需要通过在终端输入以下命令来初始化conda：\nconda init 安装Tensorflow和Tensorflow Metal #首先，基于Python 3.8创建一个名为tensorflow的虚拟环境：\nconda create -n tensorflow python=3.8 然后，激活虚拟环境：\nconda activate tensorflow 安装Tensorflow和Tensorflow Metal的依赖项：\nconda install -c apple tensorflow-deps 如果在安装包时遇到问题，请将以下命令添加到用户文件夹中的.condarc文件中，继续安装：\nsubdirs: - osx-arm64 接下来，根据Apple官网Get started with tensorflow-metal页面底部表格中列出的tensorflow-macos和tensorflow-metal的版本，使用以下命令安装Tensorflow和Tensorflow Metal插件（metal插件可以启用Apple Silicon的GPU加速）：\npython -m pip install tensorflow-macos==2.9 tensorflow-metal==0.5.0 测试安装 #使用以下命令安装Jupyter Notebook：\nconda install -c conda-forge -y jupyter 使用以下脚本来测试和运行Tensorflow（或者也可以使用官网的代码）：\nimport tensorflow as tf print(tf.__version__) print(tf.config.list_physical_devices(\u0026#39;GPU\u0026#39;)) 如果输出是：\n2.9.0 [PhysicalDevice(name=\u0026#39;/physical_device:GPU:0\u0026#39;, device_type=\u0026#39;GPU\u0026#39;)] 你已经成功在Apple Silicon上安装了Tensorflow和Tensorflow Metal，玩的开心（\n参考资料：Get started with tensorflow-metal\n","date":"2023年3月31日","permalink":"/aiml/macos-tf-install/","section":"AIML","summary":"教你怎么在MacOS Apple Silicon上安装Tensorflow","title":"如何在Apple Silicon上安装Tensorflow并启用GPU加速"},{"content":"这里会写一些我学习优化的笔记。\n","date":null,"permalink":"/opt/","section":"OPT","summary":"","title":"OPT"},{"content":" 教育背景 # 上海科技大学, 上海 专业与学位： 信息学院计算机科学与技术硕士\nGPA： 3.4 / 4.0\n时间： 2021 年 9 月 - 至今（预期2025年6月毕业） 导师： 王浩 研究方向为机器学习和运筹优化，具体为非凸非光滑优化方向。\n曼彻斯特大学 (University of Manchester), 英国曼彻斯特\n时间： 2019 年 9 月 - 2020 年 6 月\n公费留学 数学学院 (School of Mathematics)\n安徽大学, 安徽合肥 专业与学位： 数学与应用数学学士\nGPA： 3.7 / 5.0 (专业前 10%)\n时间： 2017 年 9 月 - 2021 年 6 月 校级奖学金获得者：\n文典二等奖学金 (2018 年, 校级) 文典一等奖学金 (2019 年, 校级) 文典一等奖学金 (2020 年, 校级) 自我评价 #拥有丰富的项目经验，曾参与并合作多个深度学习与算法设计项目，并发表了相关论文。对深度学习与机器学习充满热情，主动参与Kaggle竞赛并完成了多个实际应用项目。具备扎实的数学和编程基础，擅长快速学习新技术，并具有出色的自学能力和团队协作能力。职业目标是深入研究深度学习算法，并将其与实际业务需求相结合，致力于在这一领域实现技术突破并创造实际价值。\n实习经验 # 鹏城国家实验室，广东深圳，2024年6月 - 2024年8月 **岗位：**访问学生 导师：王晓\n**单位：**智能计算体系结构研究所\n参与 Overparameterized 过参数化问题研究，内容包括正则化过参数化神经网络等。 在研究过程中，成功实现了新的过参数化正则化方法，将问题从难以求解和分析的角度应用于实际需求网络。 Hotmax 好特卖 (上海芯果科技有限公司)，上海，2024 年 9 月 - 至今\n**部门：**商品流通管理部 **岗位：**数据优化实习生\n参与好特卖区域仓库优化项目，负责针对151家门店的补货需求设计并实现优化模型，通过构建线性规划目标函数和约束条件（如SKU覆盖率、运输箱数及库存周转等），利用Python中Gurobi和SCIP库进行求解和验证。 优化方案成功提升7天预期预期利润17%，配货满足率提高15%-50%，并上线实际运营，显著改善区域仓库运行效率与经济效益。 项目经历 # Kaggle： Learning Agency Lab - Automated Essay Scoring 2.0，2024年\n使用5-fold的DeBERTa模型对学生的作文进行评分。使用Pytorch、Scikit-learn、Transformers等库，对数据进行预处理，提取词频-逆文档频率等特征，训练、用Optuna和NNI微调并结合LightGBM和XGBoost融合模型，对模型进行调参。 最终获得了排名前20%的结果。 分式正则化在稀疏信号恢复中的进展：连接 \\(\\ell_{1} - \\alpha \\ell_{p}\\) 和 \\(\\ell_{1} / \\ell^{q}_{p}\\) 正则化，2022年\n研究稀疏信号恢复中的新型正则化方法\\(\\ell_1/\\ell_{p}^q\\) ，并验证其与\\(\\ell_1 - \\alpha \\ell_p\\)模型的等价性。通过构建基于受限等距性质（RIP）的优化框架，设计并实现了差分凸（DC）算法，分析了其在 KL 属性下的收敛性。 负责全程的代码开发和测试，实验涵盖 MRI 重建、高动态信号恢复和随机高斯矩阵恢复，结果表明新模型在恢复精度和稳定性上优于传统方法，具有更高的灵活性和适应性。 用于大规模反问题的循环广义混合投影方法之初探，2021年\n结合Generalized HyBR和HyBR Recycling算法开发新算法，优化参数以解决大规模的欠定反问题，减少70%的计算资源需求。 主导代码开发、性能测试，应用于数字图像处理，与LSQR等传统算法比较，使用少于50%的信息达到同等或更好的动态图像恢复效果。 Github repo 基于深度学习的混合全局优化设计的超低损耗SOI波导交叉，2023年\n通过物理信息生成对抗网络技术（PIGAN）结合二维直接二进制搜索（DBS），设计出超低损耗的SOI波导交叉结构，利用全局优化方法，提高了波导交叉的性能。使用PIGAN设计出的波导交叉结构在1550纳米中心波长的插入损耗低至0.017 dB，串扰低至-28 dB。 负责论文审阅、算法设计和代码调试，并合作发表了论文。 论文 # Chuanqi Ma, Hao Wang, et al. \u0026ldquo;Advances in Fractional Regularization for Sparse Signal Recovery: Bridging $\\ell_1-\\alpha\\ell_p$ and $\\ell_1/\\ell_q^p$ Regularizations\u0026rdquo; (2024, Manuscript) Lu Wang, Chuanqi Ma, Yanqing Wu, et al. \u0026ldquo;Ultra-low loss SOI waveguide crossings designed by a hybrid global optimization based on deep learning.\u0026rdquo; Optics Communications 556 (2024): 130189. 附加内容 # 熟悉编程语言: Python == Matlab \u0026gt; Java == C，具有使用Pytorch，Scikit-learn等深度学习和机器学习库、以及使用Numpy，Pandas等进行数据分析的相关经验，有CVX，SCIP，Gurobi等算法求解器的使用经验。 熟悉Linux与类Linux的平台，有远程开发与调试的能力，熟悉Git、Vim与VSCode等工具的使用。 语言：英语 - 熟练，六级（589分）， 托福 （总分95）。 曾在2023年任上海科技大学机器学习课程助教，具有坚实的机器学习和深度学习基础。 曾在2018年至2022年任安徽大学文典学院数学与应用数学专业学生会担任生活部部长、副主席，具有较强的组织能力和团队协作能力。 曾访问中国工业与应用数学学会（CSIAM2023）等学术会议，关注学界与业界的发展。 ","date":"0001年1月1日","permalink":"/about/","section":"","summary":"","title":"关于我"}]