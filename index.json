[{"content":" 本篇文章教你一步步在MacOS如何折腾安装Tensorflow。\n前置准备 # 在安装Tensorflow之前，你需要先安装xcode command line tools，可以在终端中输入以下命令来安装：\nxcode-select --install 另外，本教程基于anaconda，虚拟环境的创建除了anaconda，miniconda和virtualenv也是可以的。anaconda可以在这里下载并安装，请自行寻找合适的版本并遵循官网的安装指南进行安装，这里不再赘述。在安装好anaconda之后，python是可以直接使用的，但是如果你想要使用conda来创建虚拟环境，那么你需要在终端中输入以下命令来初始化conda：\nconda init 安装Tensorflow和Tensorflow Metal # 先创建一个基于python3.8的虚拟环境：\nconda create -n tensorflow python=3.8 然后激活这个虚拟环境：\nconda activate tensorflow 安装tensorflow和tensorflow-metal的依赖库：\nconda install -c apple tensorflow-deps 如果上述命令遇到无法找到安装包的问题，在用户文件夹下的.condarc中加入以下命令就能安装了：\nsubdirs: - osx-arm64 随后，基于官网的Get started with tensorflow-metal最下方表格中对应的 tensorflow-macos 和 tensorflow-metal 的版本，我们可以使用以下命令来安装tensorflow和tensorflow-metal插件（metal插件让机器学习可使用GPU加速）：\npython -m pip install tensorflow-macos==2.9 tensorflow-metal==0.5.0 测试安装 # 另外，如果需要安装Jupyter Notebook，可以使用以下命令来安装：\nconda install -c conda-forge -y jupyter 可以使用以下脚本检测并运行一下Tensorflow（也可以使用官网的代码）：\nimport tensorflow as tf print(tf.__version__) print(tf.config.list_physical_devices(\u0026#39;GPU\u0026#39;)) 如果输出是：\n2.9.0 [PhysicalDevice(name=\u0026#39;/physical_device:GPU:0\u0026#39;, device_type=\u0026#39;GPU\u0026#39;)] 那么恭喜你，你已经成功在 Apple Silicon 上安装了Tensorflow和Tensorflow Metal，可以使用啦。\n参考资料：Get started with tensorflow-metal\n","date":"2023 March 31","permalink":"/machine-learning/macos-tf-install/","section":"机器学习","summary":"教你一步步在MacOS如何\u003cdel\u003e折腾\u003c/del\u003e安装Tensorflow","title":"MacOS Tensorflow安装指南（For Apple Silicon）"},{"content":"","date":"2023 March 31","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"2023 March 31","permalink":"/","section":"Welcome to Congo! ","summary":"","title":"Welcome to Congo! "},{"content":"","date":"2023 March 31","permalink":"/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/","section":"Tags","summary":"","title":"机器学习"},{"content":"深度学习和机器学习相关。\n","date":"2023 March 31","permalink":"/machine-learning/","section":"机器学习","summary":"深度学习和机器学习相关。","title":"机器学习"},{"content":" Under Construction 排序算法非常多，本文将介绍十种热门常见的排序算法，包括冒泡排序、插入排序、选择排序、归并排序、快速排序、堆排序、计数排序、桶排序、基数排序、希尔排序等等等等。另外，作为一篇算法的小记，内容可能不太详尽，详细内容可以看菜鸟教程中的排序算法部分，本文是这些算法的简单介绍和实现。\n冒泡排序 # 插入排序 # 选择排序 # 归并排序 # 快速排序 # 堆排序 # 计数排序 # 桶排序 # 基数排序 # 希尔排序 # ","date":"2023 March 28","permalink":"/algorithm/sorting/","section":"算法","summary":"Under Construction 排序算法非常多，本文将介绍十种热门常见的排序算法，包括冒泡排序、插入排序、选择排序、归并排序、快速排序、堆排序、计数排序、桶排序、基数排序、希尔排序等等等等。另外，作为一篇算法的小记，内容可能不太详尽，详细内容可以看菜鸟教程中的排序算法部分，本文是这些算法的简单介绍和实现。","title":"排序算法"},{"content":"","date":"2023 March 28","permalink":"/tags/%E7%AE%97%E6%B3%95/","section":"Tags","summary":"","title":"算法"},{"content":"数据结构和算法……\nP.S. Mostly in Java.\n","date":"2023 March 28","permalink":"/algorithm/","section":"算法","summary":"数据结构和算法……","title":"算法"},{"content":" 二分查找是时间复杂度为 \\(O(\\log n\\)) 的算法，相比其他查找算法，其时间复杂度很低。本文将介绍二分查找的基本思想，以及如何实现二分查找。\n二分查找的基本思想 # 一句话总结：二分再二分，直到找到目标。 从最简单的情况开始分析，假设我们的数组 \\(a_1,\\ldots,a_n\\) 从小到大排列，如果想要查找其中的一个数 \\(a_i\\)，最笨的方法是从第一个数开始，一个一个地查找，直到找到这个数为止，最坏的情况就是最后一个数是我们要找的数，故这种查找的时间复杂度为 \\(O(n)\\)。\n我们可以将中间的数 \\( a_{\\lfloor n/2 \\rfloor} \\) 取出来和目标 \\( a_i \\) 进行比较， 如果中间值比目标值大，因为数组是有序的，那么目标值一定在数组的左半部分，否则目标值一定在数组的右半部分，这样我们就将查找的范围缩小了一半，如此往复我们就可以找到这个数，这种查找的时间复杂度为 \\(O(\\log n)\\)。\n二分查找的实现 # 二分查找的实现非常简单，我们只需要将上面的思想用代码实现即可。不过注意边界值的处理。 代码如下：\npublic int search(int[] nums, int target) { int left = 0, right = nums.length; while(left\u0026lt;right){ //不包含右节点,所以一开始right=nums.length-1+1 int middle = left+ (right-left \u0026gt;\u0026gt; 1);//防止数组溢出，运用位运算相当于除以2，效率更高（在什么情况下会溢出？） if(nums[middle]\u0026gt;target){ //如果中间值比目标值大，目标值一定在数组的左半部分 right = middle; }else if(nums[middle]\u0026lt;target){ ////如果中间值比目标值小，目标值一定在数组的右半部分 left = middle + 1; }else{ return middle; } } return -1; } ","date":"2023 March 21","permalink":"/algorithm/binarysearch/","section":"算法","summary":"","title":"二分查找"},{"content":"所有不包含在其他分类中的文章都会被归类到这里。\n","date":"0001 January 1","permalink":"/others/","section":"其他","summary":"所有不包含在其他分类中的文章都会被归类到这里。","title":"其他"},{"content":"优化理论，包括凸优化、非凸优化等等等等。\n","date":"0001 January 1","permalink":"/optimization/","section":"优化","summary":"优化理论，包括凸优化、非凸优化等等等等。","title":"优化"}]